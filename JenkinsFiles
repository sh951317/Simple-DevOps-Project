pipeline {
    agent any
    tools {
         maven "mvn-3.6.3"
      }
      environment {
        PROXY_HOST = 'cicd-external'
        PROXY_PORT = '8080'
    }
    
  stages {
    stage('Checkout') {      
      steps {                  
        cleanWs();
        git branch: 'FMTS-Devlop', credentialsId: 'PAT_Jenkins', url: 'https://github.axa.com/shubham-sharma-ext/th-phasia-jenkins-test.git'
        }    
      }

  stage('Build') {
      steps {
      	sh 'ls -lrt'
	sh 'echo passed'
	sh 'mvn --version'
        sh "mvn -Dhttp.proxyHost=$PROXY_HOST -Dhttp.proxyPort=$PROXY_PORT  -Dhttps.proxyHost=$PROXY_HOST -Dhttps.proxyPort=$PROXY_PORT  clean package"
        }
      }
      
  /*	
    stage('Build') {
     environment {
        HTTP_PROXY = 'http://cicd-external:8080'
      }
      steps {
               
          sh 'mvn --version'
          withEnv(['HTTP_PROXY=http://cicd-external:8080']) {
          sh 'ls -lrt'
          sh 'mvn clean package'
          }
      }
    }
  
    stage('Checkout') {
      steps {
        sh 'ls -ltr'
        sh 'echo passed'
	sh 'mvn clean package'
      }
    }
    
  */ 
   
  stage('Build and Test') {
      steps {
        sh 'ls -ltr'
         // build the project and create a JAR file
         // sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
	 sh 'cd th-phasia-jenkins-test/assets/IS/ && mvn clean package'
	 // sh 'mvn clean package'
      }
    }
    
  stage('Static Code Analysis') {
      environment {
        SONAR_URL = "https://sonarqube.asia.axa-cloud.com/"
      }
      steps {
        withCredentials([string(credentialsId: 'jenkins-shubham', variable: 'SONAR_AUTH_TOKEN')]) {
          // sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
	  sh 'cd th-phasia-jenkins-test/assets/IS/ && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
	  // sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    
  
  /*
  
    stage('Build and Push Docker Image') {
      environment {
        // DOCKER_IMAGE = "sh951317/amarpush:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        // REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
            }
        }
      }
    }
  */  
  
  /*
	stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "FMTS-Devlop"
            GIT_USER_NAME = "shubham-sharma-ext"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    git config user.email "shubham.sharma.ext@axa.com"
                    git config user.name "Shubham Sharma"
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                '''
            }
        }
    }
  */  
  }
}
